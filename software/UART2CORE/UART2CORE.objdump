
UART2CORE.elf:     file format elf32-littlenios2
UART2CORE.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000002b4 memsz 0x000002b4 flags r-x
    LOAD off    0x000012d4 vaddr 0x000012d4 paddr 0x00001344 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x000013b4 vaddr 0x000013b4 paddr 0x000013b4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000002a8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  000012c8  000012c8  000012c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000070  000012d4  00001344  000012d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  000013b4  000013b4  000013b4  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001a8  00000000  00000000  00001368  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000254  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000121c  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000074b  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001a47  00000000  00000000  000030cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001d4  00000000  00000000  00004b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005fb  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000155  00000000  00000000  000052e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00005438  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00005448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000062b1  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000062b4  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000062b9  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  000062ba  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  000062c5  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  000062d0  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000a  00000000  00000000  000062db  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000001e  00000000  00000000  000062e5  2**0
                  CONTENTS, READONLY
 24 .jdi          0000423d  00000000  00000000  00006303  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002b03c  00000000  00000000  0000a540  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
000012c8 l    d  .rodata	00000000 .rodata
000012d4 l    d  .rwdata	00000000 .rwdata
000013b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
000010f0 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000012b4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
0000117c g     F .text	0000002c alt_main
00001344 g       *ABS*	00000000 __flash_rwdata_start
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000013b8 g     O .bss	00000004 alt_argv
0000932c g       *ABS*	00000000 _gp
000012fc g     O .rwdata	00000030 alt_fd_list
000012c0 g     F .text	00000008 altera_nios2_irq_init
0000121c g     F .text	00000060 altera_avalon_jtag_uart_read
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001340 g     O .rwdata	00000004 alt_max_fd
000013c0 g       *ABS*	00000000 __bss_end
000010ac g     F .text	00000044 alt_getchar
000012d4 g     O .rwdata	00000028 alt_dev_null
000012b0 g     F .text	00000004 alt_dcache_flush_all
00001344 g       *ABS*	00000000 __ram_rwdata_end
00001338 g     O .rwdata	00000008 alt_dev_list
000012d4 g       *ABS*	00000000 __ram_rodata_end
0000132c g     O .rwdata	00000004 jtag_uart_0
000013c0 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
0000127c g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000011f8 g     F .text	00000004 alt_sys_init
000012d4 g       *ABS*	00000000 __ram_rwdata_start
000012c8 g       *ABS*	00000000 __ram_rodata_start
000013c0 g       *ABS*	00000000 __alt_stack_base
000013b4 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000050 main
000013bc g     O .bss	00000004 alt_envp
000012c8 g       *ABS*	00000000 __flash_rodata_start
000011fc g     F .text	00000020 alt_irq_init
000013b4 g     O .bss	00000004 alt_argc
00001330 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001344 g       *ABS*	00000000 _edata
000013c0 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000100c g       .entry	00000000 exit
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000011a8 g     F .text	00000050 alt_putchar
000012bc g     F .text	00000004 alt_icache_flush_all
00001110 g     F .text	0000006c alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a4cb14 	ori	gp,gp,37676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1084ed14 	ori	r2,r2,5044

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c4f014 	ori	r3,r3,5056

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011100 	call	1110 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	000117c0 	call	117c <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:

#define input (volatile char *) 0x0003010
#define output (volatile char *) 0x0003000

int main()
{ 
    105c:	deffff04 	addi	sp,sp,-4
    1060:	dfc00015 	stw	ra,0(sp)
  while (1) {

	  int c = alt_getchar();
    1064:	00010ac0 	call	10ac <alt_getchar>
	  *output = c < 0 ? 0 : c > 255 ? 255 : c;
    1068:	1007883a 	mov	r3,r2
    106c:	01003fc4 	movi	r4,255
    1070:	000b883a 	mov	r5,zero
    1074:	10000316 	blt	r2,zero,1084 <main+0x28>
    1078:	2080010e 	bge	r4,r2,1080 <main+0x24>
    107c:	2007883a 	mov	r3,r4
    1080:	180b883a 	mov	r5,r3
    1084:	008c0004 	movi	r2,12288
    1088:	11400005 	stb	r5,0(r2)
	  alt_getchar(); // it consumes '\n'
    108c:	00010ac0 	call	10ac <alt_getchar>

	  alt_putchar(*input);
    1090:	008c0404 	movi	r2,12304
    1094:	11000003 	ldbu	r4,0(r2)
    1098:	21003fcc 	andi	r4,r4,255
    109c:	2100201c 	xori	r4,r4,128
    10a0:	213fe004 	addi	r4,r4,-128
    10a4:	00011a80 	call	11a8 <alt_putchar>
    10a8:	003fee06 	br	1064 <main+0x8>

000010ac <alt_getchar>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    10ac:	00800034 	movhi	r2,0
    10b0:	1084bf04 	addi	r2,r2,4860
    10b4:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    10b8:	defffe04 	addi	sp,sp,-8
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    10bc:	01000034 	movhi	r4,0
    10c0:	2104cb04 	addi	r4,r4,4908
    10c4:	d80b883a 	mov	r5,sp
    10c8:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    10cc:	dfc00115 	stw	ra,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    10d0:	000121c0 	call	121c <altera_avalon_jtag_uart_read>
    10d4:	00ffffc4 	movi	r3,-1
    10d8:	0080010e 	bge	zero,r2,10e0 <alt_getchar+0x34>
        return -1;
    }
    return c;
    10dc:	d8c00007 	ldb	r3,0(sp)
#else
    return getchar();
#endif
}
    10e0:	1805883a 	mov	r2,r3
    10e4:	dfc00117 	ldw	ra,4(sp)
    10e8:	dec00204 	addi	sp,sp,8
    10ec:	f800283a 	ret

000010f0 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10f0:	2900051e 	bne	r5,r4,1108 <alt_load_section+0x18>
    10f4:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    10f8:	20800017 	ldw	r2,0(r4)
    10fc:	21000104 	addi	r4,r4,4
    1100:	28800015 	stw	r2,0(r5)
    1104:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1108:	29bffb1e 	bne	r5,r6,10f8 <alt_load_section+0x8>
    110c:	f800283a 	ret

00001110 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1110:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1114:	01000034 	movhi	r4,0
    1118:	2104d104 	addi	r4,r4,4932
    111c:	01400034 	movhi	r5,0
    1120:	2944b504 	addi	r5,r5,4820
    1124:	01800034 	movhi	r6,0
    1128:	3184d104 	addi	r6,r6,4932
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    112c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1130:	00010f00 	call	10f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1134:	01000034 	movhi	r4,0
    1138:	21040804 	addi	r4,r4,4128
    113c:	01400034 	movhi	r5,0
    1140:	29440804 	addi	r5,r5,4128
    1144:	01800034 	movhi	r6,0
    1148:	31840804 	addi	r6,r6,4128
    114c:	00010f00 	call	10f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1150:	01000034 	movhi	r4,0
    1154:	2104b204 	addi	r4,r4,4808
    1158:	01400034 	movhi	r5,0
    115c:	2944b204 	addi	r5,r5,4808
    1160:	01800034 	movhi	r6,0
    1164:	3184b504 	addi	r6,r6,4820
    1168:	00010f00 	call	10f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    116c:	00012b00 	call	12b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1170:	dfc00017 	ldw	ra,0(sp)
    1174:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1178:	00012bc1 	jmpi	12bc <alt_icache_flush_all>

0000117c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    117c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1180:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1184:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1188:	00011fc0 	call	11fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    118c:	00011f80 	call	11f8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1190:	d1202217 	ldw	r4,-32632(gp)
    1194:	d1602317 	ldw	r5,-32628(gp)
    1198:	d1a02417 	ldw	r6,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    119c:	dfc00017 	ldw	ra,0(sp)
    11a0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    11a4:	000105c1 	jmpi	105c <main>

000011a8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    11a8:	defffd04 	addi	sp,sp,-12
    11ac:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    11b0:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    11b4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    11b8:	01800044 	movi	r6,1
    11bc:	01000034 	movhi	r4,0
    11c0:	2104cb04 	addi	r4,r4,4908
    11c4:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    11c8:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    11cc:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    11d0:	000127c0 	call	127c <altera_avalon_jtag_uart_write>
    11d4:	1009883a 	mov	r4,r2
    11d8:	00bfffc4 	movi	r2,-1
    11dc:	2080011e 	bne	r4,r2,11e4 <alt_putchar+0x3c>
    11e0:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    11e4:	8005883a 	mov	r2,r16
    11e8:	dfc00217 	ldw	ra,8(sp)
    11ec:	dc000117 	ldw	r16,4(sp)
    11f0:	dec00304 	addi	sp,sp,12
    11f4:	f800283a 	ret

000011f8 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    11f8:	f800283a 	ret

000011fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11fc:	deffff04 	addi	sp,sp,-4
    1200:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    1204:	00012c00 	call	12c0 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1208:	00800044 	movi	r2,1
    120c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1210:	dfc00017 	ldw	ra,0(sp)
    1214:	dec00104 	addi	sp,sp,4
    1218:	f800283a 	ret

0000121c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    121c:	21000017 	ldw	r4,0(r4)
    1220:	3890000c 	andi	r2,r7,16384

  char * ptr = buffer;
  char * end = buffer + space;
    1224:	2993883a 	add	r9,r5,r6
    1228:	1010c03a 	cmpne	r8,r2,zero
    122c:	2807883a 	mov	r3,r5
    1230:	00000806 	br	1254 <altera_avalon_jtag_uart_read+0x38>

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1234:	21800037 	ldwio	r6,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1238:	30a0000c 	andi	r2,r6,32768
    123c:	10000326 	beq	r2,zero,124c <altera_avalon_jtag_uart_read+0x30>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1240:	19800005 	stb	r6,0(r3)
    1244:	18c00044 	addi	r3,r3,1
    1248:	00000206 	br	1254 <altera_avalon_jtag_uart_read+0x38>
    else if (ptr != buffer)
    124c:	1940031e 	bne	r3,r5,125c <altera_avalon_jtag_uart_read+0x40>
      break;
    else if(flags & O_NONBLOCK)
    1250:	4000081e 	bne	r8,zero,1274 <altera_avalon_jtag_uart_read+0x58>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1254:	1a7ff736 	bltu	r3,r9,1234 <altera_avalon_jtag_uart_read+0x18>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    1258:	19400226 	beq	r3,r5,1264 <altera_avalon_jtag_uart_read+0x48>
    return ptr - buffer;
    125c:	1945c83a 	sub	r2,r3,r5
    1260:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    1264:	3890000c 	andi	r2,r7,16384
    1268:	1000021e 	bne	r2,zero,1274 <altera_avalon_jtag_uart_read+0x58>
    126c:	00bffec4 	movi	r2,-5
    1270:	f800283a 	ret
    1274:	00bffd44 	movi	r2,-11
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    1278:	f800283a 	ret

0000127c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    127c:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    1280:	298f883a 	add	r7,r5,r6
    1284:	20c00104 	addi	r3,r4,4
    1288:	00000606 	br	12a4 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    128c:	18800037 	ldwio	r2,0(r3)
    1290:	10bfffec 	andhi	r2,r2,65535
    1294:	10000326 	beq	r2,zero,12a4 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1298:	28800007 	ldb	r2,0(r5)
    129c:	29400044 	addi	r5,r5,1
    12a0:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    12a4:	29fff936 	bltu	r5,r7,128c <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    12a8:	3005883a 	mov	r2,r6
    12ac:	f800283a 	ret

000012b0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    12b0:	f800283a 	ret

000012b4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    12b4:	3005883a 	mov	r2,r6
    12b8:	f800283a 	ret

000012bc <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    12bc:	f800283a 	ret

000012c0 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    12c0:	000170fa 	wrctl	ienable,zero
}
    12c4:	f800283a 	ret
