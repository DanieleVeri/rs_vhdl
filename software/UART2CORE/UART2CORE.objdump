
UART2CORE.elf:     file format elf32-littlenios2
UART2CORE.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000668 memsz 0x00000668 flags r-x
    LOAD off    0x00001688 vaddr 0x00001688 paddr 0x000016f8 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001768 vaddr 0x00001768 paddr 0x00001768 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000064c  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0000166c  0000166c  0000166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000070  00001688  000016f8  00001688  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  00001768  00001768  00001768  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00001720  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002c6  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000015ab  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000944  00000000  00000000  00003179  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001f55  00000000  00000000  00003abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000294  00000000  00000000  00005a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000075a  00000000  00000000  00005ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000004e4  00000000  00000000  00006402  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000068e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  000068f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00007865  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00007868  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000786d  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  0000786e  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00007879  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  00007884  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000a  00000000  00000000  0000788f  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000001e  00000000  00000000  00007899  2**0
                  CONTENTS, READONLY
 24 .jdi          00004422  00000000  00000000  000078b7  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00030236  00000000  00000000  0000bcd9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
0000166c l    d  .rodata	00000000 .rodata
00001688 l    d  .rwdata	00000000 .rwdata
00001768 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000011c0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00001350 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001658 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
000013dc g     F .text	0000002c alt_main
000016f8 g       *ABS*	00000000 __flash_rwdata_start
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
0000176c g     O .bss	00000004 alt_argv
000096e0 g       *ABS*	00000000 _gp
000016b0 g     O .rwdata	00000030 alt_fd_list
00001664 g     F .text	00000008 altera_nios2_irq_init
000015c0 g     F .text	00000060 altera_avalon_jtag_uart_read
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000012fc g     F .text	00000008 __udivsi3
0000105c g     F .text	00000068 itoa
000016f4 g     O .rwdata	00000004 alt_max_fd
00001774 g       *ABS*	00000000 __bss_end
0000130c g     F .text	00000044 alt_getchar
00001688 g     O .rwdata	00000028 alt_dev_null
00001654 g     F .text	00000004 alt_dcache_flush_all
000016f8 g       *ABS*	00000000 __ram_rwdata_end
000016ec g     O .rwdata	00000008 alt_dev_list
00001688 g       *ABS*	00000000 __ram_rodata_end
000016e0 g     O .rwdata	00000004 jtag_uart_0
00001304 g     F .text	00000008 __umodsi3
00001774 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001620 g     F .text	00000034 altera_avalon_jtag_uart_write
00001408 g     F .text	00000144 alt_printf
00001020 g     F .text	0000003c _start
0000159c g     F .text	00000004 alt_sys_init
00001688 g       *ABS*	00000000 __ram_rwdata_start
0000166c g       *ABS*	00000000 __ram_rodata_start
00001774 g       *ABS*	00000000 __alt_stack_base
00001768 g       *ABS*	00000000 __bss_start
000010c4 g     F .text	000000fc main
00001770 g     O .bss	00000004 alt_envp
0000123c g     F .text	00000060 __divsi3
0000166c g       *ABS*	00000000 __flash_rodata_start
000015a0 g     F .text	00000020 alt_irq_init
00001768 g     O .bss	00000004 alt_argc
000016e4 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
000016f8 g       *ABS*	00000000 _edata
00001774 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000100c g       .entry	00000000 exit
0000129c g     F .text	00000060 __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
0000154c g     F .text	00000050 alt_putchar
00001660 g     F .text	00000004 alt_icache_flush_all
00001370 g     F .text	0000006c alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a5b814 	ori	gp,gp,38624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1085da14 	ori	r2,r2,5992

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c5dd14 	ori	r3,r3,6004

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00013700 	call	1370 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00013dc0 	call	13dc <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <itoa>:

#define rs_out (volatile char *) 0x0003030
#define rs_in (volatile char *) 0x0003020
#define ack (volatile char *) 0x0003010

char* itoa(unsigned char byte) {
    105c:	defffd04 	addi	sp,sp,-12
    1060:	dc400115 	stw	r17,4(sp)
    1064:	dfc00215 	stw	ra,8(sp)
    1068:	dc000015 	stw	r16,0(sp)
    106c:	04400034 	movhi	r17,0
    1070:	8c459b84 	addi	r17,r17,5742
	int i;
	char *result = "000";
	for(i = 0; i < 3; i++, byte /= 10) {
		result[2 - i] = (byte % 10 ) + '0';
    1074:	24003fcc 	andi	r16,r4,255
    1078:	8009883a 	mov	r4,r16
    107c:	01400284 	movi	r5,10
    1080:	00013040 	call	1304 <__umodsi3>
    1084:	10800c04 	addi	r2,r2,48
#define ack (volatile char *) 0x0003010

char* itoa(unsigned char byte) {
	int i;
	char *result = "000";
	for(i = 0; i < 3; i++, byte /= 10) {
    1088:	8009883a 	mov	r4,r16
    108c:	01400284 	movi	r5,10
		result[2 - i] = (byte % 10 ) + '0';
    1090:	88800005 	stb	r2,0(r17)
#define ack (volatile char *) 0x0003010

char* itoa(unsigned char byte) {
	int i;
	char *result = "000";
	for(i = 0; i < 3; i++, byte /= 10) {
    1094:	00012fc0 	call	12fc <__udivsi3>
    1098:	1009883a 	mov	r4,r2
    109c:	8c7fffc4 	addi	r17,r17,-1
    10a0:	00800034 	movhi	r2,0
    10a4:	10859ac4 	addi	r2,r2,5739
    10a8:	88bff21e 	bne	r17,r2,1074 <itoa+0x18>
		result[2 - i] = (byte % 10 ) + '0';
	}
	return result;
}
    10ac:	88800044 	addi	r2,r17,1
    10b0:	dfc00217 	ldw	ra,8(sp)
    10b4:	dc400117 	ldw	r17,4(sp)
    10b8:	dc000017 	ldw	r16,0(sp)
    10bc:	dec00304 	addi	sp,sp,12
    10c0:	f800283a 	ret

000010c4 <main>:

int main() {
    10c4:	defffb04 	addi	sp,sp,-20
    10c8:	dc400115 	stw	r17,4(sp)
    10cc:	dfc00415 	stw	ra,16(sp)
    10d0:	dcc00315 	stw	r19,12(sp)
    10d4:	dc800215 	stw	r18,8(sp)
    10d8:	dc000015 	stw	r16,0(sp)
    10dc:	0023883a 	mov	r17,zero
	int i;
	for (i = 0; i < 223; i++) {
		int c = alt_getchar() - '0';
    10e0:	000130c0 	call	130c <alt_getchar>
		*rs_in = i;
    10e4:	008c0804 	movi	r2,12320
    10e8:	14400005 	stb	r17,0(r2)
		*ack = 1; *ack = 0;
    10ec:	048c0404 	movi	r18,12304
    10f0:	04c00044 	movi	r19,1
		alt_printf("sym %s:", itoa((unsigned char)(i+1)));
    10f4:	8c000044 	addi	r16,r17,1
int main() {
	int i;
	for (i = 0; i < 223; i++) {
		int c = alt_getchar() - '0';
		*rs_in = i;
		*ack = 1; *ack = 0;
    10f8:	94c00005 	stb	r19,0(r18)
		alt_printf("sym %s:", itoa((unsigned char)(i+1)));
    10fc:	8009883a 	mov	r4,r16
int main() {
	int i;
	for (i = 0; i < 223; i++) {
		int c = alt_getchar() - '0';
		*rs_in = i;
		*ack = 1; *ack = 0;
    1100:	90000005 	stb	zero,0(r18)
		alt_printf("sym %s:", itoa((unsigned char)(i+1)));
    1104:	000105c0 	call	105c <itoa>
    1108:	100b883a 	mov	r5,r2
    110c:	01000034 	movhi	r4,0
    1110:	21059c04 	addi	r4,r4,5744
    1114:	00014080 	call	1408 <alt_printf>
		alt_printf("%s\n", itoa(*rs_out));
    1118:	008c0c04 	movi	r2,12336
    111c:	11000003 	ldbu	r4,0(r2)
	return result;
}

int main() {
	int i;
	for (i = 0; i < 223; i++) {
    1120:	8023883a 	mov	r17,r16
		int c = alt_getchar() - '0';
		*rs_in = i;
		*ack = 1; *ack = 0;
		alt_printf("sym %s:", itoa((unsigned char)(i+1)));
		alt_printf("%s\n", itoa(*rs_out));
    1124:	21003fcc 	andi	r4,r4,255
    1128:	000105c0 	call	105c <itoa>
    112c:	100b883a 	mov	r5,r2
    1130:	01000034 	movhi	r4,0
    1134:	21059e04 	addi	r4,r4,5752
    1138:	00014080 	call	1408 <alt_printf>
	return result;
}

int main() {
	int i;
	for (i = 0; i < 223; i++) {
    113c:	008037c4 	movi	r2,223
    1140:	80bfe71e 	bne	r16,r2,10e0 <main+0x1c>
		*rs_in = i;
		*ack = 1; *ack = 0;
		alt_printf("sym %s:", itoa((unsigned char)(i+1)));
		alt_printf("%s\n", itoa(*rs_out));
	}
	*ack = 1; *ack = 0;
    1144:	94c00005 	stb	r19,0(r18)
    1148:	90000005 	stb	zero,0(r18)
    114c:	043ff804 	movi	r16,-32
	for (i = 0; i < 32; i++) {
		alt_printf("sym %s:", itoa((unsigned char)(i+224)));
    1150:	81003fcc 	andi	r4,r16,255
    1154:	000105c0 	call	105c <itoa>
    1158:	100b883a 	mov	r5,r2
    115c:	01000034 	movhi	r4,0
    1160:	21059c04 	addi	r4,r4,5744
    1164:	00014080 	call	1408 <alt_printf>
		alt_printf("%s\n", itoa(*rs_out));
    1168:	008c0c04 	movi	r2,12336
    116c:	11000003 	ldbu	r4,0(r2)
		*ack = 1; *ack = 0;
    1170:	84000044 	addi	r16,r16,1
		alt_printf("%s\n", itoa(*rs_out));
	}
	*ack = 1; *ack = 0;
	for (i = 0; i < 32; i++) {
		alt_printf("sym %s:", itoa((unsigned char)(i+224)));
		alt_printf("%s\n", itoa(*rs_out));
    1174:	21003fcc 	andi	r4,r4,255
    1178:	000105c0 	call	105c <itoa>
    117c:	100b883a 	mov	r5,r2
    1180:	01000034 	movhi	r4,0
    1184:	21059e04 	addi	r4,r4,5752
    1188:	00014080 	call	1408 <alt_printf>
		*ack = 1; *ack = 0;
    118c:	00cc0404 	movi	r3,12304
    1190:	00800044 	movi	r2,1
    1194:	18800005 	stb	r2,0(r3)
		*ack = 1; *ack = 0;
		alt_printf("sym %s:", itoa((unsigned char)(i+1)));
		alt_printf("%s\n", itoa(*rs_out));
	}
	*ack = 1; *ack = 0;
	for (i = 0; i < 32; i++) {
    1198:	80803fcc 	andi	r2,r16,255
		alt_printf("sym %s:", itoa((unsigned char)(i+224)));
		alt_printf("%s\n", itoa(*rs_out));
		*ack = 1; *ack = 0;
    119c:	18000005 	stb	zero,0(r3)
		*ack = 1; *ack = 0;
		alt_printf("sym %s:", itoa((unsigned char)(i+1)));
		alt_printf("%s\n", itoa(*rs_out));
	}
	*ack = 1; *ack = 0;
	for (i = 0; i < 32; i++) {
    11a0:	103feb1e 	bne	r2,zero,1150 <main+0x8c>
		alt_printf("sym %s:", itoa((unsigned char)(i+224)));
		alt_printf("%s\n", itoa(*rs_out));
		*ack = 1; *ack = 0;
	}
	return 0;
}
    11a4:	dfc00417 	ldw	ra,16(sp)
    11a8:	dcc00317 	ldw	r19,12(sp)
    11ac:	dc800217 	ldw	r18,8(sp)
    11b0:	dc400117 	ldw	r17,4(sp)
    11b4:	dc000017 	ldw	r16,0(sp)
    11b8:	dec00504 	addi	sp,sp,20
    11bc:	f800283a 	ret

000011c0 <udivmodsi4>:
    11c0:	29001b2e 	bgeu	r5,r4,1230 <udivmodsi4+0x70>
    11c4:	28001a16 	blt	r5,zero,1230 <udivmodsi4+0x70>
    11c8:	00800044 	movi	r2,1
    11cc:	0007883a 	mov	r3,zero
    11d0:	01c007c4 	movi	r7,31
    11d4:	00000306 	br	11e4 <udivmodsi4+0x24>
    11d8:	19c01326 	beq	r3,r7,1228 <udivmodsi4+0x68>
    11dc:	18c00044 	addi	r3,r3,1
    11e0:	28000416 	blt	r5,zero,11f4 <udivmodsi4+0x34>
    11e4:	294b883a 	add	r5,r5,r5
    11e8:	1085883a 	add	r2,r2,r2
    11ec:	293ffa36 	bltu	r5,r4,11d8 <udivmodsi4+0x18>
    11f0:	10000d26 	beq	r2,zero,1228 <udivmodsi4+0x68>
    11f4:	0007883a 	mov	r3,zero
    11f8:	21400236 	bltu	r4,r5,1204 <udivmodsi4+0x44>
    11fc:	2149c83a 	sub	r4,r4,r5
    1200:	1886b03a 	or	r3,r3,r2
    1204:	1004d07a 	srli	r2,r2,1
    1208:	280ad07a 	srli	r5,r5,1
    120c:	103ffa1e 	bne	r2,zero,11f8 <udivmodsi4+0x38>
    1210:	30000226 	beq	r6,zero,121c <udivmodsi4+0x5c>
    1214:	2005883a 	mov	r2,r4
    1218:	f800283a 	ret
    121c:	1809883a 	mov	r4,r3
    1220:	2005883a 	mov	r2,r4
    1224:	f800283a 	ret
    1228:	0007883a 	mov	r3,zero
    122c:	003ff806 	br	1210 <udivmodsi4+0x50>
    1230:	00800044 	movi	r2,1
    1234:	0007883a 	mov	r3,zero
    1238:	003fef06 	br	11f8 <udivmodsi4+0x38>

0000123c <__divsi3>:
    123c:	defffe04 	addi	sp,sp,-8
    1240:	dc000015 	stw	r16,0(sp)
    1244:	dfc00115 	stw	ra,4(sp)
    1248:	0021883a 	mov	r16,zero
    124c:	20000c16 	blt	r4,zero,1280 <__divsi3+0x44>
    1250:	000d883a 	mov	r6,zero
    1254:	28000e16 	blt	r5,zero,1290 <__divsi3+0x54>
    1258:	00011c00 	call	11c0 <udivmodsi4>
    125c:	1007883a 	mov	r3,r2
    1260:	8005003a 	cmpeq	r2,r16,zero
    1264:	1000011e 	bne	r2,zero,126c <__divsi3+0x30>
    1268:	00c7c83a 	sub	r3,zero,r3
    126c:	1805883a 	mov	r2,r3
    1270:	dfc00117 	ldw	ra,4(sp)
    1274:	dc000017 	ldw	r16,0(sp)
    1278:	dec00204 	addi	sp,sp,8
    127c:	f800283a 	ret
    1280:	0109c83a 	sub	r4,zero,r4
    1284:	04000044 	movi	r16,1
    1288:	000d883a 	mov	r6,zero
    128c:	283ff20e 	bge	r5,zero,1258 <__divsi3+0x1c>
    1290:	014bc83a 	sub	r5,zero,r5
    1294:	8021003a 	cmpeq	r16,r16,zero
    1298:	003fef06 	br	1258 <__divsi3+0x1c>

0000129c <__modsi3>:
    129c:	deffff04 	addi	sp,sp,-4
    12a0:	dfc00015 	stw	ra,0(sp)
    12a4:	01800044 	movi	r6,1
    12a8:	2807883a 	mov	r3,r5
    12ac:	20000416 	blt	r4,zero,12c0 <__modsi3+0x24>
    12b0:	28000c16 	blt	r5,zero,12e4 <__modsi3+0x48>
    12b4:	dfc00017 	ldw	ra,0(sp)
    12b8:	dec00104 	addi	sp,sp,4
    12bc:	00011c01 	jmpi	11c0 <udivmodsi4>
    12c0:	0109c83a 	sub	r4,zero,r4
    12c4:	28000b16 	blt	r5,zero,12f4 <__modsi3+0x58>
    12c8:	180b883a 	mov	r5,r3
    12cc:	01800044 	movi	r6,1
    12d0:	00011c00 	call	11c0 <udivmodsi4>
    12d4:	0085c83a 	sub	r2,zero,r2
    12d8:	dfc00017 	ldw	ra,0(sp)
    12dc:	dec00104 	addi	sp,sp,4
    12e0:	f800283a 	ret
    12e4:	014bc83a 	sub	r5,zero,r5
    12e8:	dfc00017 	ldw	ra,0(sp)
    12ec:	dec00104 	addi	sp,sp,4
    12f0:	00011c01 	jmpi	11c0 <udivmodsi4>
    12f4:	0147c83a 	sub	r3,zero,r5
    12f8:	003ff306 	br	12c8 <__modsi3+0x2c>

000012fc <__udivsi3>:
    12fc:	000d883a 	mov	r6,zero
    1300:	00011c01 	jmpi	11c0 <udivmodsi4>

00001304 <__umodsi3>:
    1304:	01800044 	movi	r6,1
    1308:	00011c01 	jmpi	11c0 <udivmodsi4>

0000130c <alt_getchar>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    130c:	00800034 	movhi	r2,0
    1310:	1085ac04 	addi	r2,r2,5808
    1314:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    1318:	defffe04 	addi	sp,sp,-8
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    131c:	01000034 	movhi	r4,0
    1320:	2105b804 	addi	r4,r4,5856
    1324:	d80b883a 	mov	r5,sp
    1328:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    132c:	dfc00115 	stw	ra,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    1330:	00015c00 	call	15c0 <altera_avalon_jtag_uart_read>
    1334:	00ffffc4 	movi	r3,-1
    1338:	0080010e 	bge	zero,r2,1340 <alt_getchar+0x34>
        return -1;
    }
    return c;
    133c:	d8c00007 	ldb	r3,0(sp)
#else
    return getchar();
#endif
}
    1340:	1805883a 	mov	r2,r3
    1344:	dfc00117 	ldw	ra,4(sp)
    1348:	dec00204 	addi	sp,sp,8
    134c:	f800283a 	ret

00001350 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1350:	2900051e 	bne	r5,r4,1368 <alt_load_section+0x18>
    1354:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    1358:	20800017 	ldw	r2,0(r4)
    135c:	21000104 	addi	r4,r4,4
    1360:	28800015 	stw	r2,0(r5)
    1364:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1368:	29bffb1e 	bne	r5,r6,1358 <alt_load_section+0x8>
    136c:	f800283a 	ret

00001370 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1370:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1374:	01000034 	movhi	r4,0
    1378:	2105be04 	addi	r4,r4,5880
    137c:	01400034 	movhi	r5,0
    1380:	2945a204 	addi	r5,r5,5768
    1384:	01800034 	movhi	r6,0
    1388:	3185be04 	addi	r6,r6,5880
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    138c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1390:	00013500 	call	1350 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1394:	01000034 	movhi	r4,0
    1398:	21040804 	addi	r4,r4,4128
    139c:	01400034 	movhi	r5,0
    13a0:	29440804 	addi	r5,r5,4128
    13a4:	01800034 	movhi	r6,0
    13a8:	31840804 	addi	r6,r6,4128
    13ac:	00013500 	call	1350 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    13b0:	01000034 	movhi	r4,0
    13b4:	21059b04 	addi	r4,r4,5740
    13b8:	01400034 	movhi	r5,0
    13bc:	29459b04 	addi	r5,r5,5740
    13c0:	01800034 	movhi	r6,0
    13c4:	3185a204 	addi	r6,r6,5768
    13c8:	00013500 	call	1350 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    13cc:	00016540 	call	1654 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    13d0:	dfc00017 	ldw	ra,0(sp)
    13d4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    13d8:	00016601 	jmpi	1660 <alt_icache_flush_all>

000013dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    13dc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    13e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    13e4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    13e8:	00015a00 	call	15a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    13ec:	000159c0 	call	159c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    13f0:	d1202217 	ldw	r4,-32632(gp)
    13f4:	d1602317 	ldw	r5,-32628(gp)
    13f8:	d1a02417 	ldw	r6,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    13fc:	dfc00017 	ldw	ra,0(sp)
    1400:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1404:	00010c41 	jmpi	10c4 <main>

00001408 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1408:	defff804 	addi	sp,sp,-32
    140c:	dfc00415 	stw	ra,16(sp)
    1410:	dc800315 	stw	r18,12(sp)
    1414:	dc400215 	stw	r17,8(sp)
    1418:	dc000115 	stw	r16,4(sp)
    141c:	d9400515 	stw	r5,20(sp)
    1420:	d9800615 	stw	r6,24(sp)
    1424:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    1428:	d8800504 	addi	r2,sp,20
    142c:	2025883a 	mov	r18,r4
    1430:	d8800015 	stw	r2,0(sp)
    1434:	00003d06 	br	152c <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1438:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    143c:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1440:	18800226 	beq	r3,r2,144c <alt_printf+0x44>
        {
            alt_putchar(c);
    1444:	1809883a 	mov	r4,r3
    1448:	00000a06 	br	1474 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    144c:	91000007 	ldb	r4,0(r18)
    1450:	94800044 	addi	r18,r18,1
    1454:	20003726 	beq	r4,zero,1534 <alt_printf+0x12c>
            {
                if (c == '%')
    1458:	20c00626 	beq	r4,r3,1474 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    145c:	008018c4 	movi	r2,99
    1460:	2080061e 	bne	r4,r2,147c <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    1464:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    1468:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    146c:	10800104 	addi	r2,r2,4
    1470:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    1474:	000154c0 	call	154c <alt_putchar>
    1478:	00002c06 	br	152c <alt_printf+0x124>
                }
                else if (c == 'x')
    147c:	00801e04 	movi	r2,120
    1480:	20801e1e 	bne	r4,r2,14fc <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    1484:	d8800017 	ldw	r2,0(sp)
    1488:	14400017 	ldw	r17,0(r2)
    148c:	10800104 	addi	r2,r2,4
    1490:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    1494:	88000226 	beq	r17,zero,14a0 <alt_printf+0x98>
    1498:	04000704 	movi	r16,28
    149c:	00000306 	br	14ac <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    14a0:	01000c04 	movi	r4,48
    14a4:	003ff306 	br	1474 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    14a8:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    14ac:	008003c4 	movi	r2,15
    14b0:	1404983a 	sll	r2,r2,r16
    14b4:	8884703a 	and	r2,r17,r2
    14b8:	103ffb26 	beq	r2,zero,14a8 <alt_printf+0xa0>
    14bc:	00000b06 	br	14ec <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    14c0:	8884703a 	and	r2,r17,r2
    14c4:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    14c8:	00800244 	movi	r2,9
                            c = '0' + digit;
    14cc:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    14d0:	10c0012e 	bgeu	r2,r3,14d8 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    14d4:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    14d8:	21003fcc 	andi	r4,r4,255
    14dc:	2100201c 	xori	r4,r4,128
    14e0:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    14e4:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    14e8:	000154c0 	call	154c <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    14ec:	008003c4 	movi	r2,15
    14f0:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    14f4:	803ff20e 	bge	r16,zero,14c0 <alt_printf+0xb8>
    14f8:	00000c06 	br	152c <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    14fc:	00801cc4 	movi	r2,115
    1500:	20800a1e 	bne	r4,r2,152c <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    1504:	d8800017 	ldw	r2,0(sp)
    1508:	14000017 	ldw	r16,0(r2)
    150c:	10800104 	addi	r2,r2,4
    1510:	d8800015 	stw	r2,0(sp)
    1514:	00000106 	br	151c <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    1518:	000154c0 	call	154c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    151c:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    1520:	84000044 	addi	r16,r16,1
    1524:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    1528:	103ffb1e 	bne	r2,zero,1518 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    152c:	90c00007 	ldb	r3,0(r18)
    1530:	183fc11e 	bne	r3,zero,1438 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    1534:	dfc00417 	ldw	ra,16(sp)
    1538:	dc800317 	ldw	r18,12(sp)
    153c:	dc400217 	ldw	r17,8(sp)
    1540:	dc000117 	ldw	r16,4(sp)
    1544:	dec00804 	addi	sp,sp,32
    1548:	f800283a 	ret

0000154c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    154c:	defffd04 	addi	sp,sp,-12
    1550:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1554:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1558:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    155c:	01800044 	movi	r6,1
    1560:	01000034 	movhi	r4,0
    1564:	2105b804 	addi	r4,r4,5856
    1568:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    156c:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1570:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1574:	00016200 	call	1620 <altera_avalon_jtag_uart_write>
    1578:	1009883a 	mov	r4,r2
    157c:	00bfffc4 	movi	r2,-1
    1580:	2080011e 	bne	r4,r2,1588 <alt_putchar+0x3c>
    1584:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    1588:	8005883a 	mov	r2,r16
    158c:	dfc00217 	ldw	ra,8(sp)
    1590:	dc000117 	ldw	r16,4(sp)
    1594:	dec00304 	addi	sp,sp,12
    1598:	f800283a 	ret

0000159c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    159c:	f800283a 	ret

000015a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    15a0:	deffff04 	addi	sp,sp,-4
    15a4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    15a8:	00016640 	call	1664 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    15ac:	00800044 	movi	r2,1
    15b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    15b4:	dfc00017 	ldw	ra,0(sp)
    15b8:	dec00104 	addi	sp,sp,4
    15bc:	f800283a 	ret

000015c0 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    15c0:	21000017 	ldw	r4,0(r4)
    15c4:	3890000c 	andi	r2,r7,16384

  char * ptr = buffer;
  char * end = buffer + space;
    15c8:	2993883a 	add	r9,r5,r6
    15cc:	1010c03a 	cmpne	r8,r2,zero
    15d0:	2807883a 	mov	r3,r5
    15d4:	00000806 	br	15f8 <altera_avalon_jtag_uart_read+0x38>

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    15d8:	21800037 	ldwio	r6,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    15dc:	30a0000c 	andi	r2,r6,32768
    15e0:	10000326 	beq	r2,zero,15f0 <altera_avalon_jtag_uart_read+0x30>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    15e4:	19800005 	stb	r6,0(r3)
    15e8:	18c00044 	addi	r3,r3,1
    15ec:	00000206 	br	15f8 <altera_avalon_jtag_uart_read+0x38>
    else if (ptr != buffer)
    15f0:	1940031e 	bne	r3,r5,1600 <altera_avalon_jtag_uart_read+0x40>
      break;
    else if(flags & O_NONBLOCK)
    15f4:	4000081e 	bne	r8,zero,1618 <altera_avalon_jtag_uart_read+0x58>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    15f8:	1a7ff736 	bltu	r3,r9,15d8 <altera_avalon_jtag_uart_read+0x18>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    15fc:	19400226 	beq	r3,r5,1608 <altera_avalon_jtag_uart_read+0x48>
    return ptr - buffer;
    1600:	1945c83a 	sub	r2,r3,r5
    1604:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    1608:	3890000c 	andi	r2,r7,16384
    160c:	1000021e 	bne	r2,zero,1618 <altera_avalon_jtag_uart_read+0x58>
    1610:	00bffec4 	movi	r2,-5
    1614:	f800283a 	ret
    1618:	00bffd44 	movi	r2,-11
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    161c:	f800283a 	ret

00001620 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1620:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    1624:	298f883a 	add	r7,r5,r6
    1628:	20c00104 	addi	r3,r4,4
    162c:	00000606 	br	1648 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1630:	18800037 	ldwio	r2,0(r3)
    1634:	10bfffec 	andhi	r2,r2,65535
    1638:	10000326 	beq	r2,zero,1648 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    163c:	28800007 	ldb	r2,0(r5)
    1640:	29400044 	addi	r5,r5,1
    1644:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1648:	29fff936 	bltu	r5,r7,1630 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    164c:	3005883a 	mov	r2,r6
    1650:	f800283a 	ret

00001654 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1654:	f800283a 	ret

00001658 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    1658:	3005883a 	mov	r2,r6
    165c:	f800283a 	ret

00001660 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1660:	f800283a 	ret

00001664 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1664:	000170fa 	wrctl	ienable,zero
}
    1668:	f800283a 	ret
